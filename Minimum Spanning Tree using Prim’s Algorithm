#include <stdio.h>
#include <limits.h>

#define MAX 100
#define INF INT_MAX

// Find the vertex with the minimum key value from the set of vertices
// not yet included in MST
int minKey(int key[], int mstSet[], int n) {
    int min = INF, min_index = -1;

    for (int v = 0; v < n; v++)
        if (!mstSet[v] && key[v] < min) {
            min = key[v];
            min_index = v;
        }

    return min_index;
}

// Function to print MST stored in parent[]
void printMST(int parent[], int graph[MAX][MAX], int n) {
    printf("Edge \tWeight\n");
    for (int i = 1; i < n; i++)
        printf("%d - %d \t%d\n", parent[i], i, graph[i][parent[i]]);
}

// Prim's algorithm to construct MST
void primMST(int graph[MAX][MAX], int n) {
    int parent[MAX];   // Array to store constructed MST
    int key[MAX];      // Key values used to pick minimum weight edge
    int mstSet[MAX];   // To represent set of vertices included in MST

    // Initialize all keys as infinite and mstSet[] as false
    for (int i = 0; i < n; i++) {
        key[i] = INF;
        mstSet[i] = 0;
    }

    // Always include first vertex in MST
    key[0] = 0;     // Make key 0 so this vertex is picked first
    parent[0] = -1; // First node is root of MST

    // The MST will have n vertices
    for (int count = 0; count < n - 1; count++) {
        // Pick the minimum key vertex from the set of vertices not yet included in MST
        int u = minKey(key, mstSet, n);

        mstSet[u] = 1; // Add vertex u to MST set

        // Update key value and parent index of the adjacent vertices of u
        for (int v = 0; v < n; v++) {
            // graph[u][v] is non-zero only for adjacent vertices of u
            // mstSet[v] is false for vertices not yet included in MST
            // Update key only if graph[u][v] is smaller than key[v]
            if (graph[u][v] && !mstSet[v] && graph[u][v] < key[v]) {
                parent[v] = u;
                key[v] = graph[u][v];
            }
        }
    }

    // Print constructed MST
    printMST(parent, graph, n);
}

int main() {
    int n;

    printf("Enter number of vertices: ");
    scanf("%d", &n);

    int graph[MAX][MAX];

    printf("Enter adjacency matrix (weights, 0 if no edge):\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    primMST(graph, n);

    return 0;
}
