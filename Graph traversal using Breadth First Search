#include <stdio.h>
#include <stdlib.h>

#define MAX 100

// Queue structure for BFS
typedef struct {
    int items[MAX];
    int front;
    int rear;
} Queue;

// Initialize queue
void initQueue(Queue* q) {
    q->front = -1;
    q->rear = -1;
}

// Check if queue is empty
int isEmpty(Queue* q) {
    return q->front == -1;
}

// Enqueue element
void enqueue(Queue* q, int value) {
    if (q->rear == MAX - 1) {
        printf("Queue overflow\n");
        return;
    }
    if (isEmpty(q)) {
        q->front = 0;
    }
    q->items[++q->rear] = value;
}

// Dequeue element
int dequeue(Queue* q) {
    if (isEmpty(q)) {
        printf("Queue underflow\n");
        return -1;
    }
    int value = q->items[q->front];
    if (q->front == q->rear) {
        // Reset queue after last element removed
        q->front = q->rear = -1;
    } else {
        q->front++;
    }
    return value;
}

// BFS function
void BFS(int graph[MAX][MAX], int n, int start) {
    int visited[MAX] = {0};  // Track visited nodes
    Queue q;
    initQueue(&q);

    visited[start] = 1;
    enqueue(&q, start);

    printf("BFS traversal starting from vertex %d: ", start);

    while (!isEmpty(&q)) {
        int current = dequeue(&q);
        printf("%d ", current);

        // Visit all adjacent vertices
        for (int i = 0; i < n; i++) {
            if (graph[current][i] == 1 && !visited[i]) {
                visited[i] = 1;
                enqueue(&q, i);
            }
        }
    }
    printf("\n");
}

int main() {
    int n;

    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    int graph[MAX][MAX];

    printf("Enter adjacency matrix (0 or 1):\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    int startVertex;
    printf("Enter starting vertex (0 to %d): ", n - 1);
    scanf("%d", &startVertex);

    if (startVertex < 0 || startVertex >= n) {
        printf("Invalid start vertex\n");
        return 1;
    }

    BFS(graph, n, startVertex);

    return 0;
}
